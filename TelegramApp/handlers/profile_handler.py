from aiogram import types, Router
from filters.profile_filtre import ProfileFilter, DeleteFilter
from aiogram.fsm.context import FSMContext
from state.profile_state import DeleteProfileState
from state.review_state import ReviewState
from keyboard.reply_btn import get_del_btn
from keyboard.inline_btn import generate_button_for_review
from aiogram.types import ReplyKeyboardRemove, FSInputFile

import logging


profile_handler: Router = Router()


@profile_handler.callback_query(ProfileFilter())
async def profile_btn_reac(clb_data: types.CallbackQuery) -> None:
    """
        React to profile btn
    """

    logging.info(msg="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏—é –ª–∏—á–Ω–æ–≥–æ –º–µ–Ω—é")
    await clb_data.message.answer(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É —Å –¥–∞—Ç–æ–π {clb_data.data}"
    )


@profile_handler.callback_query(DeleteFilter())
async def delete_profile_btn_reac(message: types.CallbackQuery, state: FSMContext) -> None:
    """
        Access to delete profile
    """

    logging.info(msg="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏—é - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    await message.message.answer(
        text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç - '–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', –≤—ã —É–≤–µ—Ä–µ–Ω—ã: ",
        reply_markup=(await get_del_btn())
    )
    await state.set_state(DeleteProfileState.like_do_del)

@profile_handler.message(DeleteProfileState.like_do_del)
async def del_profile_choice(clb_data: types.Message, state: FSMContext):
    """
        Del profile
    """

    if clb_data.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        logging.info(msg="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
        await state.update_data(like_do_del=True)
        await clb_data.answer(text="–û—Ç–ª–∏—á–Ω–æ! –í—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif clb_data.text == "–ù–µ—Ç, –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å":
        logging.info(msg="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
        await state.update_data(like_do_del=False)
        await clb_data.answer(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    else:
        await clb_data.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞/–ù–µ—Ç'")


@profile_handler.message(ReviewState.title_review)
async def get_name_organization_from_user(msg: types.Message, state: FSMContext) -> None:
    """
        Get name organization
    """

    logging.info(msg="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –æ—Ç–∑—ã–≤–æ–≤ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞")
    if msg.content_type == "text":
        await state.update_data(name_organization = msg.text)
        await msg.answer(
            text=f"üí• –û—Ç–ª–∏—á–Ω–æ <b>{msg.from_user.first_name}</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤",
            parse_mode="HTML"
        )
        await state.set_state(ReviewState.description)
    else:
        await msg.answer(text="–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç!")


@profile_handler.message(ReviewState.description)
async def get_description_from_user(msg: types.Message, state: FSMContext) -> None:
    """
        Get description for organization from user
    """

    logging.info(msg="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –æ—Ç–∑—ã–≤–æ–≤ - –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞")

    if msg.content_type == "text":
        await state.update_data(description=msg.text)
        await msg.answer(
            text=f"üí• <b>–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <i>—É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É</i>, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –¥–∞–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è?",
            parse_mode="HTML",
            reply_markup=await generate_button_for_review()
        )
        await state.set_state(ReviewState.like_or_not)
    else:
        await msg.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç!")


@profile_handler.callback_query(lambda message: message.data.endswith("btn"))
async def get_choices_review_score_from_user(msg: types.CallbackQuery, state: FSMContext) -> None:
    """
        Get score review from user
    """
    
    logging.info(msg="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –æ—Ç–∑—ã–≤–æ–≤ - –æ—Ü–µ–Ω–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
    result_score: bool = False
    if msg.data == "yep_btn":
        result_score = True

    await state.update_data(like_or_note=result_score)

    await msg.message.reply_animation(
        animation=FSInputFile("TelegramApp/static/review.gif"),
        caption=f"–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ <b>{msg.from_user.first_name}</b>, –≤–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        parse_mode="HTML"
    )
    await state.clear()